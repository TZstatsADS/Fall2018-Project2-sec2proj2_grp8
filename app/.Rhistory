shiny::runApp()
shiny::runApp()
runApp()
runApp('~/Documents/GitHub/Sample')
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp('~/Desktop/Fall2018-Project2-sec2proj2_grp8/app')
runApp('~/Desktop/Fall2018-Project2-sec2proj2_grp8/app')
runApp()
runApp()
runApp('~/Downloads')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
yelp <- stream_in(file("./data/yelp_academic_dataset_business.json"))
str(yelp)
library(jsonlite)
yelp <- stream_in(file("./data/yelp_academic_dataset_business.json"))
getwd()
shiny::runApp()
source("function.R")
get_yelp_data()
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
get_yelp_data <- function(latitude = 40.748817,
longitude = -73.985428,
categories = NULL,
radius = 5000,
price = NULL){
get_yelp_data <- function(latitude = 40.748817,
longitude = -73.985428,
categories = NULL,
radius = 5000,
price = NULL){
# Type inspection ---------------------------------------------------------
if(!is.double(latitude)) {
stop("latitude must be a decimal number")
} else {
lat <- latitude
}
if(!is.double(longitude)) {
stop("longitude must be a decimal number")
} else {
lng <- longitude
}
if(!is.numeric(radius)) {
stop("radius must be an integer number")
} else {
rad <- as.integer(radius)
}
if(is.double(price)) {
stop("price must be of type $, $$ or $$$")
} else {
p <- price
}
# Initialization ---------------------------------------------------------
yelp <- "https://api.yelp.com"
term <- "restaurants"
location <- "NYC"
typ <- categories
limit <- 50
# Add filter to search engine
url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term,
location = location,
limit = limit,
longitude = lng,
latitude = lat,
price = p,
categories = typ,
radius = rad
)
)
# Send request to API and get results
res <- GET(url, add_headers('Authorization' = paste("bearer", "zLZesNlW8YSPyNP9poXD-_FDOhvNFACzrq-xAul5H3b6isbviX3o2EuCeifPRAsTvfz_c0lPzJUPNtzUIeowGHmhheCAxRMWz_lc5cqQAY-7X94pAvYkC3pXNjG2W3Yx")))
results <- content(res)
# Define a function to parse search results with only the columns needed -----
yelp_httr_parse <- function(x) {
# Set a list of wanted columns
parse_list <- list(id = x$id,
name = x$name,
rating = x$rating,
price = x$price,
review_count = x$review_count,
latitude = x$coordinates$latitude,
longitude = x$coordinates$longitude,
address1 = x$location$address1,
city = x$location$city,
state = x$location$state,
distance = x$distance
)
# Read results into the parse_list without useless columns
parse_list <- lapply(parse_list, FUN = function(x) ifelse(is.null(x), "", x))
# Change parse_list to data frame type
df <- data_frame(id=parse_list$id,
name=parse_list$name,
rating = parse_list$rating,
price = parse_list$price,
review_count = parse_list$review_count,
latitude=parse_list$latitude,
longitude = parse_list$longitude,
address1 = parse_list$address1,
city = parse_list$city,
state = parse_list$state,
distance= parse_list$distance)
df
}
# Call yelp_httr_parse() to get parse results and save in results_list -----------
results_list <- lapply(results$businesses, FUN = yelp_httr_parse)
payload <- do.call("rbind", results_list)
# Return
payload
}
get_yelp_data
get_yelp_data()
get_yelp_data <- function(latitude = 40.748817,
longitude = -73.985428,
categories = NULL,
radius = 5000,
price = NULL)
if(!is.double(latitude)) {
stop("latitude must be a decimal number")
} else {
lat <- latitude
}
if(!is.double(longitude)) {
stop("longitude must be a decimal number")
} else {
lng <- longitude
}
if(!is.numeric(radius)) {
stop("radius must be an integer number")
} else {
rad <- as.integer(radius)
}
if(is.double(price)) {
stop("price must be of type $, $$ or $$$")
} else {
p <- price
}
get_yelp_data()
shiny::runApp()
source("function.R")
get_yelp_data()
source("function.R")
get_yelp_data()
get_yelp_data(categories = italian)
get_yelp_data(radius = 2500)
get_yelp_data(radius = 2500, price=$)
get_yelp_data(radius = 2500, price="$")
get_yelp_data(radius = 2500, price="$$")
get_yelp_data(radius = 2500, price=$$)
get_yelp_data(radius = 2500, price='$$')
get_yelp_data(radius = 2500, price==$$)
get_yelp_data(radius = 2500, price=='$$')
get_yelp_data(radius = 2500, price='$$')
get_yelp_data(radius = 2500, price ="$$")
get_yelp_data(radius = 2500, categories = "Italian")
get_yelp_data(radius = 2500, price = 2)
source("function.R")
get_yelp_data(radius = 2500, price = 2)
get_yelp_data(radius = 2500, price = 2, categories = 'Japanese')
get_yelp_data(radius = 2500, categories = "Italian", price = 3)
get_yelp_data(radius = 2500, categories = "Italian", price = 2)
get_yelp_data(radius = 2500, categories = "Restaurant, Italian", price = 2)
get_yelp_data(radius = 2500, categories = "Restaurant, Chinese", price = 2)
get_yelp_data(radius = 2500, categories = "chinese, All", price = 2)
get_yelp_data(radius = 2500, categories = "italian, All", price = 2)
get_yelp_data(radius = 2500, categories = "italian", price = 2)
get_yelp_data(radius = 2500, categories = "Italian", price = 2)
get_yelp_data(radius = 2500, categories = "italian, bar", price = 2)
get_yelp_data(radius = 2500, categories = "italian, All", price = 2)
get_yelp_data(radius = 2500, categories = "napoletana", price = 2)
get_yelp_data(radius = 2500, categories = "napoletana, IT", price = 2)
get_yelp_data(radius = 2500, categories = "napoletana, [IT]", price = 2)
get_yelp_data(radius = 2500, categories = "napoletana, [IT, CZ, FR]", price = 2)
get_yelp_data(radius = 2500, categories = "roman", price = 2)
get_yelp_data(radius = 2500, categories = "italian, roman", price = 2)
get_yelp_data(radius = 2500, categories = "tuscan", price = 2)
=======
=======
>>>>>>> ac5310ffbba28559de370bf2d5ef051ea164f0ea
=======
>>>>>>> 85ed36a4262e455353be89f57344b7b4818aa64d
shiny::runApp()
runApp('~/Downloads/Project2/未命名檔案夾/Fall2016-Proj2-grp12-master/app')
runApp()
runApp()
source("function.R")
att_loc <- read.csv("./data/NYC_attractions.csv")
getwd()
setwd(..)
setwd("..")
getwd()
setwd("./app")
getwd()
source("function.R")
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
View(att_loc)
getwd()
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
x
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
if (att_loc$Code == att) {
out <- c(att_loc$results[[1]]$Longitude,
att_loc$results[[1]]$Latitude)
}
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
if (att_loc$Code == x) {
out <- c(att_loc$results[[1]]$Longitude,
att_loc$results[[1]]$Latitude)
}
out
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
match(x,att_loc$Code)
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
match(x,att_loc$Code)
c(att_loc$Latitude[[x]])
c(att_loc$Latitude[[1]])
c(att_loc$Latitude[[1:2]])
c(att_loc$Latitude[1])
c(att_loc$Latitude[1:2])
c(att_loc$Latitude[x])
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
match(x,att_loc$Code)
c(att_loc$Latitude[x])
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
y <- match(x,att_loc$Code)
c(att_loc$Latitude[y])
ass <- c('John Doe','Peter Gynn','Jolie Hope')
be <- c(21000, 23400, 26800)
x <- data.frame(employee, salary)
ass <- c('John Doe','Peter Gynn','Jolie Hope')
be <- c(21000, 23400, 26800)
x <- data.frame(ass, be)
x$ass
x$ass <- c('John','Peter')
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
x <- c('SL','CP')
y <- match(x,att_loc$Code)
att_loc$Latitude[y]
runApp()
runApp()
runApp()
shinyServer(function(input, output) {
# Map rendering -----------------------------------------------------------------------------
# Initialization
output$map <- renderLeaflet({
leaflet() %>%
setView(lng = -73.980, lat = 40.740, zoom =13) %>%
addProviderTiles("CartoDB.Positron")
})
# checkbox for price
output$value <- renderPrint({ input$checkGroup })
# Check inputs
observeEvent(input$att, {
m = match(input$att,att_loc$Code)
att_lng = att_loc$Latitude[m]
att_lat = att_loc$Longitude[m]
att_nm = att_loc$Attraction[m]
df_app = data.frame(att_nm, att_lng, att_lat)
})
# Output on map -------------------------------------------------------------
# Make a list of icons
attIcons <- iconList(
SL = makeIcon("SL.png", 18, 18)
)
output$map_output <- renderLeaflet({
mapping <- leaflet(data = df_app) %>%
setView(lng = -73.980, lat = 40.740, zoom =13) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~att_lng,
lat = ~att_lng,
popup = ~att_nm)
mapping
})
})
shiny::runApp()
View(att_loc)
View(get_yelp_data)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("..")
att_loc <- read.csv("./data/NYC_attractions.csv")
setwd("./app")
m = match(c('SL','CP'),att_loc$Code)
att_lng = att_loc$Latitude[m]
att_lat = att_loc$Longitude[m]
att_nm = att_loc$Attraction[m]
df_app = data.frame(att_nm, att_lng, att_lat)
df_app
View(df_app)
shiny::runApp()
View(att_loc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (!require('devtools')) install.packages('devtools')
devtools::install_github('rstudio/leaflet')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> ac5310ffbba28559de370bf2d5ef051ea164f0ea
=======
>>>>>>> ac5310ffbba28559de370bf2d5ef051ea164f0ea
=======
>>>>>>> parent of c7f9d87... alex's changes
=======
shiny::runApp()
runApp()
runApp()
runApp()
>>>>>>> 85ed36a4262e455353be89f57344b7b4818aa64d
